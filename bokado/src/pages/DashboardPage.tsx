import React, { useState, useEffect } from 'react';
import { useAppSelector } from '../hooks/useAuth';
import { Link } from 'react-router-dom';
import DashboardNav from '../components/Dashbord/DashboardNav';
import EventsPage from './EventsPage';
import { FiHome, FiUsers, FiCalendar, FiUser, FiLogOut, FiMenu, FiChevronLeft, FiRefreshCw, FiMessageSquare, FiTarget } from 'react-icons/fi'; // üëà –î–æ–¥–∞–ª–∏ FiTarget –¥–ª—è —ñ–∫–æ–Ω–∫–∏
import { useCats } from '../hooks/useCat';
import CatCard from '../components/Dashbord/CatCard';
import { useDispatch } from 'react-redux';
import { logout } from '../store/slices/authSlice';
import '../styles/DashboardPages.css';
import ChallengesList from '../components/ChallengesList/ChallengesList';
import { FiDollarSign } from 'react-icons/fi';


const DashboardPage: React.FC = () => {
  const { user } = useAppSelector((state) => state.auth);
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  const { cats, loading: catsLoading, error: catsError, refetch } = useCats(3);
  const dispatch = useDispatch();

  const toggleSidebar = () => {
    setIsSidebarCollapsed(!isSidebarCollapsed);
  };

  const handleLogout = () => {
    dispatch(logout());
    window.location.href = '/login';
  };

  useEffect(() => {
    console.log('user:', user);
  }, [user]);

  return (
    <div className={`dashboard-container dark-theme ${isSidebarCollapsed ? 'sidebar-collapsed' : ''}`}>
      <aside className="sidebar">
        <div className="sidebar-header">
          {!isSidebarCollapsed && <h2>–ú–µ–Ω—é</h2>}
          <button className="sidebar-toggle" onClick={toggleSidebar}>
            {isSidebarCollapsed ? <FiMenu size={24} /> : <FiChevronLeft size={24} />}
          </button>
        </div>

        <nav className="sidebar-nav">
          <ul>
            <li><Link to="/dashboard" className="nav-link active"><FiHome /><span>–ì–æ–ª–æ–≤–Ω–∞</span></Link></li>
            <li><Link to="/friends-dashboard" className="nav-link"><FiUsers /><span>–î—Ä—É–∑—ñ</span></Link></li>
            <li><Link to="/events" className="nav-link"><FiCalendar /><span>–ü–æ–¥—ñ—ó</span></Link></li>
            <li><Link to={`/profile/${user?.userId}`} className="nav-link"><FiUser /><span>–ü—Ä–æ—Ñ—ñ–ª—å</span></Link></li>
            <li><Link to="/chats" className="nav-link"><FiMessageSquare /><span>–ß–∞—Ç–∏</span></Link></li>
            <li><Link to="/challenges" className="nav-link"><FiTarget /><span>–ß–µ–ª–µ–Ω–¥–∂—ñ</span></Link></li> {/* üëà –î–æ–¥–∞–ª–∏ –ø—É–Ω–∫—Ç –ß–µ–ª–µ–Ω–¥–∂—ñ */}
            <li><Link to="/premium" className="nav-link"><FiDollarSign /><span>–ü—Ä–µ–º—ñ—É–º –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è</span></Link></li> {/* –Ω–æ–≤–∏–π –ø—É–Ω–∫—Ç */}
          </ul>
        </nav>

        <div className="sidebar-footer">
          <button className="logout-btn" onClick={handleLogout}>
            <FiLogOut /><span>–í–∏–π—Ç–∏</span>
          </button>
        </div>
      </aside>

      <main className="main-content">
        {user ? (
          <>
            <DashboardNav username={user.username} userId={user.userId} onMenuToggle={toggleSidebar} />
            <div className="dashboard-content">
              {/* –ö–æ—Ç–∏–∫–∏ –¥–Ω—è */}
              <section className="dashboard-section">
                <div className="section-header">
                  <h2><FiUser className="icon-spacing" /> –ö–æ—Ç–∏–∫–∏ –¥–Ω—è</h2>
                  <button onClick={refetch} className="refresh-btn" title="–û–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ç–∏–∫—ñ–≤">
                    <FiRefreshCw size={18} />
                  </button>
                </div>

                {catsLoading && <div className="loading"><FiRefreshCw className="spin" /> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ç–∏–∫—ñ–≤...</div>}
                {catsError && (
                  <div className="error">
                    <p><FiUser className="icon-spacing" /> –ü–æ–º–∏–ª–∫–∞: {catsError}</p>
                    <button onClick={refetch} className="retry-btn">
                      <FiRefreshCw className="icon-spacing" /> –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É
                    </button>
                  </div>
                )}
                <div className="cats-grid">
                  {cats.map((cat) => (
                    <CatCard key={cat.id} cat={cat} />
                  ))}
                </div>
              </section>


             <section className="dashboard-section">
  <div className="section-header">
    <h2><FiTarget className="icon-spacing" /> –ú–æ—ó —á–µ–ª–µ–Ω–¥–∂—ñ</h2>
  </div>
  <ChallengesList />
</section>

              <section className="dashboard-section">
                <div className="section-header">
                  <h2><FiCalendar className="icon-spacing" /> –ü–æ–¥—ñ—ó</h2>
                  <Link to="/events/create" className="gradient-btn">
                    –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –ø–æ–¥—ñ—é
                  </Link>
                </div>
                <EventsPage />
              </section>
            </div>
          </>
        ) : (
          <div className="loading">
            <FiRefreshCw className="spin" /> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...
          </div>
        )}
      </main>
    </div>
  );
};

export default DashboardPage;
